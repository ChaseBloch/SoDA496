d2.add <- setdiff(d1.names, d2.names)
# columns in d2 but not in d1
d1.add <- setdiff(d2.names, d1.names)
# add blank columns to d2
if(length(d2.add) > 0) {
for(i in 1:length(d2.add)) {
d2[d2.add[i]] <- NA
}
}
# add blank columns to d1
if(length(d1.add) > 0) {
for(i in 1:length(d1.add)) {
d1[d1.add[i]] <- NA
}
}
return(rbind(d1, d2))
}
df <- fastmerge(df, df2)
View(df)
View(df2)
names(df) <- gsub(":", "", names(df))
names(df) <- make.names(names(df), unique=TRUE)
df <- df[!is.na(df$AC1_1) & !is.na(df$AC1_2) & df$Status != "Survey Preview" & df$Finished == "TRUE",]
df[] <- lapply(df, function(x) {
is.na(levels(x)) <- levels(x) == "NA"
x
})
df <- df[df$i.AC2 == "The United States and Iran" | df$q.AC2 == "The United States and Qatar",]
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- fastmerge(df, df2)
names(df) <- gsub(":", "", names(df))
names(df) <- make.names(names(df), unique=TRUE)
df <- df[!is.na(df$AC1_1) & !is.na(df$AC1_2) & df$Status != "Survey Preview" & df$Finished == "TRUE",]
df[] <- lapply(df, function(x) {
is.na(levels(x)) <- levels(x) == "NA"
x
})
View(df)
df <- df[df$i.AC2 == "The United States and Iran" | df$q.AC2 == "The United States and Qatar",]
df = df[df$i.AC2 == "The United States and Iran" | df$q.AC2 == "The United States and Qatar",]
df$i.AC2 == "The United States and Iran" | df$q.AC2 == "The United States and Qatar"
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- fastmerge(df, df2)
names(df) <- gsub(":", "", names(df))
names(df) <- make.names(names(df), unique=TRUE)
###Attention Checks###
#Drop based on first attention check
df <- df[!is.na(df$AC1_1) & !is.na(df$AC1_2) & df$Status != "Survey Preview" & df$Finished == "TRUE",]
df[] <- lapply(df, function(x) {
is.na(levels(x)) <- levels(x) == "NA"
x
})
df = df[df$i.AC2 == "The United States and Iran" | df$q.AC2 == "The United States and Qatar",]
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- fastmerge(df, df2)
names(df) <- gsub(":", "", names(df))
names(df) <- make.names(names(df), unique=TRUE)
###Attention Checks###
#Drop based on first attention check
df <- df[!is.na(df$AC1_1) & !is.na(df$AC1_2) & df$Status != "Survey Preview" & df$Finished == "TRUE",]
df[] <- lapply(df, function(x) {
is.na(levels(x)) <- levels(x) == "NA"
x
})
View(df)
df$i.AC2 == "The United States and Iran" | df$q.AC2 == "The United States and Qatar"
df$i.AC2 == "The United States and Iran"
df$q.AC2 == "The United States and Qatar"
df$q.AC2
df$q.AC2
class(df$q.AC2)
class(df$i.AC2)
#Drop based on second attention check
df$q.AC2 = as.character(df$q.AC2)
class(df$i.AC2)
class(df$q.AC2)
#Drop based on second attention check
df$q.AC2 = as.string(df$q.AC2)
#Drop based on second attention check
df$q.AC2 = as.list(df$q.AC2)
class(df$q.AC2)
df$q.AC2 == "The United States and Qatar"
#Drop based on second attention check
df$q.AC2 = as.factor(df$q.AC2)
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- fastmerge(df, df2)
names(df) <- gsub(":", "", names(df))
names(df) <- make.names(names(df), unique=TRUE)
###Attention Checks###
#Drop based on first attention check
df <- df[!is.na(df$AC1_1) & !is.na(df$AC1_2) & df$Status != "Survey Preview" & df$Finished == "TRUE",]
df[] <- lapply(df, function(x) {
is.na(levels(x)) <- levels(x) == "NA"
x
})
df$q.AC2 = as.factor(df$q.AC2)
class(df$q.AC2)
df$q.AC2 == "The United States and Qatar"
df$i.AC2 == "The United States and Iran"
df$q.AC2[1] == "The United States and Qatar"
df$q.AC2
df$i.AC2
df$q.AC2 == "The United States and Qatar"
df$q.AC2[1] == "The United States and Qatar"
class(df$q.AC2)
class(df$i.AC2)
class(df2$q.AC2)
df <- fastmerge(df, df2)
class(df$q.AC2)
fastmerge <- function(d1, d2) {
d1.names <- names(d1)
d2.names <- names(d2)
# columns in d1 but not in d2
d2.add <- setdiff(d1.names, d2.names)
# columns in d2 but not in d1
d1.add <- setdiff(d2.names, d1.names)
# add blank columns to d2
if(length(d2.add) > 0) {
for(i in 1:length(d2.add)) {
mode(d2[d2.add[i]]) <- mode(d1[d2.add[i]])
}
}
# add blank columns to d1
if(length(d1.add) > 0) {
for(i in 1:length(d1.add)) {
d1[d1.add[i]] <- NA
}
}
return(rbind(d1, d2))
}
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- fastmerge(df, df2)
View(df)
df <- fastmerge(df, df2)
help(mode)
mode(df[df2.add[i]])
mode(df[df2[i]])
i = 5
mode(df[df2[i]])
df2[i]
df[df2[i]]
mode(df[i])
fastmerge <- function(d1, d2) {
d1.names <- names(d1)
d2.names <- names(d2)
# columns in d1 but not in d2
d2.add <- setdiff(d1.names, d2.names)
# columns in d2 but not in d1
d1.add <- setdiff(d2.names, d1.names)
# add blank columns to d2
if(length(d2.add) > 0) {
for(i in 1:length(d2.add)) {
mode(d2[d2.add[i]]) <- mode(d1.add[i])
}
}
# add blank columns to d1
if(length(d1.add) > 0) {
for(i in 1:length(d1.add)) {
d1[d1.add[i]] <- NA
}
}
return(rbind(d1, d2))
}
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- fastmerge(df, df2)
fastmerge <- function(d1, d2) {
d1.names <- names(d1)
d2.names <- names(d2)
# columns in d1 but not in d2
d2.add <- setdiff(d1.names, d2.names)
# columns in d2 but not in d1
d1.add <- setdiff(d2.names, d1.names)
# add blank columns to d2
if(length(d2.add) > 0) {
for(i in 1:length(d2.add)) {
d2[d2.add[i]] <- NA
}
}
# add blank columns to d1
if(length(d1.add) > 0) {
for(i in 1:length(d1.add)) {
d1[d1.add[i]] <- NA
}
}
return(rbind(d1, d2))
}
df <- fastmerge(df, df2)
fastmerge <- function(d1, d2) {
d1.names <- names(d1)
d2.names <- names(d2)
# columns in d1 but not in d2
d2.add <- setdiff(d1.names, d2.names)
# columns in d2 but not in d1
d1.add <- setdiff(d2.names, d1.names)
# add blank columns to d2
if(length(d2.add) > 0) {
for(i in 1:length(d2.add)) {
d2[d2.add[i]] <- NA
mode(d2[i]) <- mode(d1[i])
}
}
# add blank columns to d1
if(length(d1.add) > 0) {
for(i in 1:length(d1.add)) {
d1[d1.add[i]] <- NA
}
}
return(rbind(d1, d2))
}
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- fastmerge(df, df2)
class(df$q.AC2)
class(df$i.AC2)
names(df) <- gsub(":", "", names(df))
names(df) <- make.names(names(df), unique=TRUE)
df <- df[!is.na(df$AC1_1) & !is.na(df$AC1_2) & df$Status != "Survey Preview" & df$Finished == "TRUE",]
df[] <- lapply(df, function(x) {
is.na(levels(x)) <- levels(x) == "NA"
x
})
df$q.AC2 == "The United States and Qatar"
mode(df[i])
i = 15
mode(df[i])
i = 20
mode(df[i])
df[5]
class(df[i])
class(df2[i]) <- class(df[i])
class(df2[i])
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
class(df2[i])
help(class)
View(df)
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- bind_rows(df, df2)
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- bind_rows(df, df2)
View(df)
names(df) <- gsub(":", "", names(df))
names(df) <- make.names(names(df), unique=TRUE)
df <- df[!is.na(df$AC1_1) & !is.na(df$AC1_2) & df$Status != "Survey Preview" & df$Finished == "TRUE",]
df[] <- lapply(df, function(x) {
is.na(levels(x)) <- levels(x) == "NA"
x
})
df = df[df$i.AC2 == "The United States and Iran" | df$q.AC2 == "The United States and Qatar",]
df$i.AC2 == "The United States and Iran"
df$q.AC2 == "The United States and Qatar"
length(df)
df[,]
length(df[,]
)
length(df[1,])
length(df[,1])
length(df[1])
df[1]
df[,1]
length(df[,1])
df[[1]]
length(df[[1]])
for(i in 1:length(df[[1]])) {
ifelse(df$i.AC2[i] == "The United States and Iran" | df$q.AC2[i] == "The United States and Qatar", 1,0)
}
ifelse(df$i.AC2[i] == "The United States and Iran" | df$q.AC2[i] == "The United States and Qatar", 1,0)
class(df$i.AC2)
class(df$q.AC2)
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- bind_rows(df, df2)
names(df) <- gsub(":", "", names(df))
names(df) <- make.names(names(df), unique=TRUE)
###Attention Checks###
#Drop based on first attention check
df <- df[!is.na(df$AC1_1) & !is.na(df$AC1_2) & df$Status != "Survey Preview" & df$Finished == "TRUE",]
df[] <- lapply(df, function(x) {
is.na(levels(x)) <- levels(x) == "NA"
x
})
#Drop based on second attention check
df = df[df$i.AC2 == "The United States and Iran" | df$q.AC2 == "The United States and Qatar",]
df$i.AC2 == "The United States and Iran"
df$q.AC2 == "The United States and Qatar"
#Drop based on second attention check
df$i.AC2 = as.character(df$i.AC2)
df$i.AC2 == "The United States and Iran"
class(df$q.AC2)
df$i.AC2 = as.character(df$i.AC2)
class(df$q.AC2)
class(df$i.AC2)
df$i.AC2 == "The United States and Iran"
surveys <- all_surveys()
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
class(df$i.AC2)
df$i.AC2 == "The United States and Iran"
help(bind_rows)
help(bind_rows[2])
class(df$i.AC2[2])
class(df$i.AC2[1])
class(df$i.AC2[4])
class(df$i.AC2[5])
class(df$i.AC2[5])
df$i.AC2[5]
df$i.AC2[2]
class(i.AC2[2])
class(df$i.AC2[2])
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- bind_rows(df, df2)
names(df) <- gsub(":", "", names(df))
names(df) <- make.names(names(df), unique=TRUE)
df <- df[!is.na(df$AC1_1) & !is.na(df$AC1_2) & df$Status != "Survey Preview" & df$Finished == "TRUE",]
df[] <- lapply(df, function(x) {
is.na(levels(x)) <- levels(x) == "NA"
x
})
df = df[df$i.AC2 == "The United States and Iran" | df$q.AC2 == "The United States and Qatar",]
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- bind_rows(df, df2)
names(df) <- gsub(":", "", names(df))
names(df) <- make.names(names(df), unique=TRUE)
###Attention Checks###
#Drop based on first attention check
df <- df[!is.na(df$AC1_1) & !is.na(df$AC1_2) & df$Status != "Survey Preview" & df$Finished == "TRUE",]
df[] <- lapply(df, function(x) {
is.na(levels(x)) <- levels(x) == "NA"
x
})
df$i.AC2
df$i.AC2[5]
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- rbind(df, df2)
help("rbind")
library(data.table)
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- data.table::rbind(df, df2)
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- rbindlist(list(df, df2))
View(df)
df <- fetch_survey(surveyID = surveys$id[10],verbose =TRUE,force_request = TRUE)
df2 <- fetch_survey(surveyID = surveys$id[2],verbose =TRUE,force_request = TRUE)
df <- rbindlist(list(df, df2), fill = TRUE)
df$i.AC2
df$q.AC2
names(df) <- gsub(":", "", names(df))
names(df) <- make.names(names(df), unique=TRUE)
df <- df[!is.na(df$AC1_1) & !is.na(df$AC1_2) & df$Status != "Survey Preview" & df$Finished == "TRUE",]
df[] <- lapply(df, function(x) {
is.na(levels(x)) <- levels(x) == "NA"
x
})
df = df[df$i.AC2 == "The United States and Iran" | df$q.AC2 == "The United States and Qatar",]
df <- df[df$Status == "IP Address",]
df <- df[!is.na(df$Status),]
View(df)
df$treat[!is.na(df$q.denial)] <- 0
df$treat[!is.na(df$i.denial)] <- 1
df$treat[!is.na(df$q.overt)] <- 2
df$treat[!is.na(df$i.overt)] <- 3
#Creating denial and adversary variables
df$denial_2 = ifelse(!is.na(df$q.denial) | !is.na(df$i.denial), 1,0)
df$adversary_2 = ifelse(!is.na(df$i.AC2), 1,0)
#Creating treatment dummy varaibles
df$overt_nonadversary = ifelse(df$treat == 2, 1, 0)
df$adversary = ifelse(df$treat == 3, 1, 0)
df$denial = ifelse(df$treat == 0, 1, 0)
df$denial_adversary = ifelse(df$treat == 1, 1, 0)
###Combining Variables###
df = df %>% mutate(escalation_1 = coalesce(q.escalation_1, i.escalation_1))
df = df %>% mutate(escalation_2 = coalesce(q.escalation_2, i.escalation_2))
df = df %>% mutate(escalation_3 = coalesce(q.escalation_3, i.escalation_3))
df = df %>% mutate(escalation_4 = coalesce(q.escalation_4, i.escalation_4))
df = df %>% mutate(reputation_1 = coalesce(q.reputation_1, i.reputation_1))
df = df %>% mutate(reputation_2 = coalesce(q.reputation_2, i.reputation_2))
df = df %>% mutate(reputation_3 = coalesce(q.reputation_3, i.reputation_3))
df = df %>% mutate(emotions_1 = coalesce(q.emotions_1, i.emotions_1))
df$treat[!is.na(df$q.denial)] <- 0
df$treat[!is.na(df$i.denial)] <- 1
df$treat[!is.na(df$q.overt)] <- 2
df$treat[!is.na(df$i.overt)] <- 3
df$denial_2 = ifelse(!is.na(df$q.denial) | !is.na(df$i.denial), 1,0)
df$adversary_2 = ifelse(!is.na(df$i.AC2), 1,0)
df$overt_nonadversary = ifelse(df$treat == 2, 1, 0)
df$adversary = ifelse(df$treat == 3, 1, 0)
df$denial = ifelse(df$treat == 0, 1, 0)
df$denial_adversary = ifelse(df$treat == 1, 1, 0)
df = df %>% mutate(escalation_1 = coalesce(q.escalation_1, i.escalation_1))
df = df %>% mutate(escalation_2 = coalesce(q.escalation_2, i.escalation_2))
df = df %>% mutate(escalation_3 = coalesce(q.escalation_3, i.escalation_3))
df = df %>% mutate(escalation_4 = coalesce(q.escalation_4, i.escalation_4))
df = df %>% mutate(reputation_1 = coalesce(q.reputation_1, i.reputation_1))
df = df %>% mutate(reputation_2 = coalesce(q.reputation_2, i.reputation_2))
df = df %>% mutate(reputation_3 = coalesce(q.reputation_3, i.reputation_3))
df = df %>% mutate(emotions_1 = coalesce(q.emotions_1, i.emotions_1))
df = df %>% mutate(insulting = coalesce(q.emotions, i.emotions))
df = df %>% mutate(ambiguity = coalesce(q.ambiguity, i.ambiguity))
df$escalation_1 = factor(df$escalation_1, levels = c(
"Oppose strongly",
"Oppose somewhat",
"Neither favor nor oppose",
"Favor somewhat",
"Favor Strongly"
))
df$escalation_2 = factor(df$escalation_2, levels = c(
"Oppose strongly",
"Oppose somewhat",
"Neither favor nor oppose",
"Favor somewhat",
"Favor Strongly"
))
df$escalation_3 = factor(df$escalation_3, levels = c(
"Oppose strongly",
"Oppose somewhat",
"Neither favor nor oppose",
"Favor somewhat",
"Favor Strongly"
))
df$escalation_4 = factor(df$escalation_4, levels = c(
"Oppose strongly",
"Oppose somewhat",
"Neither favor nor oppose",
"Favor somewhat",
"Favor Strongly"
))
#Create weighted escalation variable
df$esca1 = as.numeric(df$escalation_1)*1
df$esca2 = as.numeric(df$escalation_2)*2
df$esca3 = as.numeric(df$escalation_3)*3
df$esca4 = as.numeric(df$escalation_4)*4
df$esca_dv = (as.numeric(df$esca1) + as.numeric(df$esca2) + as.numeric(df$esca3) + as.numeric(df$esca4)) - 5
df$esca_dv = df$esca_dv/45*100
#Created scaled escalation variable
df$esca_scaled = (scale(as.numeric(df$escalation_1)) + scale(as.numeric(df$escalation_2)) + scale(as.numeric(df$escalation_3)) + scale(as.numeric(df$escalation_4)))/4
#Creating individual escalation variables for each answer
df$war[as.numeric(df$escalation_4) == 4 | as.numeric(df$escalation_4) == 5 ] <- 1
df$war[as.numeric(df$escalation_4) == 1 | as.numeric(df$escalation_4) == 2 | as.numeric(df$escalation_4) == 3] <- 0
df$airstrike[as.numeric(df$escalation_3) == 4 | as.numeric(df$escalation_3) == 5 ] <- 1
df$airstrike[as.numeric(df$escalation_3) == 1 | as.numeric(df$escalation_3) == 2 | as.numeric(df$escalation_3) == 3] <- 0
df$sanctions[as.numeric(df$escalation_2) == 4 | as.numeric(df$escalation_2) == 5 ] <- 1
df$sanctions[as.numeric(df$escalation_2) == 1 | as.numeric(df$escalation_2) == 2 | as.numeric(df$escalation_2) == 3 ] <- 0
df$diplomacy[as.numeric(df$escalation_1) == 4 | as.numeric(df$escalation_1) == 5 ] <- 1
df$diplomacy[as.numeric(df$escalation_1) == 1 | as.numeric(df$escalation_1) == 2 | as.numeric(df$escalation_1) == 3 ] <- 0
#Military Assertiveness
df$MA = (6 - as.numeric(df$MA1)) + as.numeric(df$MA2) + (6 - as.numeric(df$MA3))
df$MA_scaled = (scale(6 - as.numeric(df$MA1))) + scale(as.numeric(df$MA2)) + scale((6 - as.numeric(df$MA3)))/3
#National Chauvinism
df$NC = (as.numeric(df$NC1) + as.numeric(df$NC2))
df$NC_scaled = scale(as.numeric(df$NC1) + scale(as.numeric(df$NC2)))/2
#Reputation
df$reputation_1 = factor(df$reputation_1, levels = c(
"Almost no chance",
"25% change",
"50-50 chance",
"75% chance",
"Nearly 100% certain"
))
df$reputation_2 = factor(df$reputation_2, levels = c(
"Almost no chance",
"25% change",
"50-50 chance",
"75% chance",
"Nearly 100% certain"
))
df$reputation_3 = factor(df$reputation_3, levels = c(
"Almost no chance",
"25% change",
"50-50 chance",
"75% chance",
"Nearly 100% certain"
))
df$reputation_scaled = (scale(as.numeric(df$reputation_1)) + scale(as.numeric(df$reputation_2)) + scale(as.numeric(df$reputation_3)))/3
df$reputation = as.numeric(df$reputation_1) + as.numeric(df$reputation_2) + as.numeric(df$reputation_3)
df_res = df %>% dplyr::select(denial_2, adversary_2, esca_dv, esca_scaled, escalation_1, escalation_2, escalation_3, escalation_4, treat, denial, MA, MA_scaled, GovTrust, NewsTrust, IntTrust, NC, NC_scaled, Military.Service, Read.FP, reputation, reputation_scaled, ambiguity, insulting, war, airstrike, sanctions, diplomacy, reputation_1, reputation_2, reputation_3, adversary, denial_adversary, overt_nonadversary)
df_res[] <- sapply(df_res, as.numeric)
med_ma = median(df_res$MA_scaled)
df_res_dove = df_res[df_res$MA_scaled < med_ma,]
df_res_hawk = df_res[df_res$MA_scaled > med_ma,]
df_res$denial_adversary_2 = df_res$denial_2*df_res$adversary_2
m_den = lm(esca_scaled ~ denial_2 + MA_scaled + GovTrust + NewsTrust + IntTrust + NC_scaled + Military.Service + Read.FP, data = df_res)
m_adv= lm(esca_scaled ~ denial_2 + adversary_2 + MA_scaled + GovTrust + NewsTrust + IntTrust + NC_scaled + Military.Service + Read.FP, data = df_res)
m_denXadv= lm(esca_scaled ~ denial_2 + adversary_2 + denial_adversary_2 + MA_scaled + GovTrust + NewsTrust + IntTrust + NC_scaled + Military.Service + Read.FP, data = df_res)
stargazer(m_den,m_adv,m_denXadv, type = "html", out = "MainContDV.html", title = "Continuous DV", omit.stat = c("ll","rsq","adj.rsq","f","aic","ser"))
BROWSE("MainContDv.html")
stargazer(m_rep, m_amb, m_ins, type = 'html', out = "OnTheMeds.html",dep.var.labels =
(c("Reputation", "Certainty", "Anxious", "Insulted", "Angry")),
omit.stat = c("ll","rsq","adj.rsq","f","aic","ser"),
title = "Testing Treatments on the Mediators")
m_rep = lm(reputation_scaled ~ denial_2 + adversary_2 + denial_adversary_2 +  MA_scaled + GovTrust + NewsTrust + IntTrust + NC_scaled + Military.Service + Read.FP, data = df_res)
m_amb = lm(ambiguity ~ denial_2 + adversary_2 + denial_adversary_2 +  MA_scaled + GovTrust + NewsTrust + IntTrust + NC_scaled + Military.Service + Read.FP, data = df_res) #method = "probit", Hess = TRUE)
m_ins = lm(insulting ~ denial_2 + adversary_2 + denial_adversary_2 +  MA_scaled + GovTrust + NewsTrust + IntTrust + NC_scaled + Military.Service + Read.FP, data = df_res, family = "binomial")
stargazer(m_rep, m_amb, m_ins, type = 'html', out = "OnTheMeds.html",dep.var.labels =
(c("Reputation", "Certainty", "Anxious", "Insulted", "Angry")),
omit.stat = c("ll","rsq","adj.rsq","f","aic","ser"),
title = "Testing Treatments on the Mediators")
BROWSE("OnTheMeds.html")
m_amb = lm(ambiguity ~ denial_2 + adversary_2 + denial_adversary_2 +  MA_scaled + GovTrust + NewsTrust + IntTrust + NC_scaled + Military.Service + Read.FP, data = df_res) #method = "probit", Hess = TRUE)
summary(m_amb)
